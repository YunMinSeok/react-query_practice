{"ast":null,"code":"var _jsxFileName = \"/Users/yunminseok/Desktop/study/react-query_practice/base-infinite-swapi/src/species/InfiniteSpecies.jsx\",\n  _s = $RefreshSig$();\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Species } from \"./Species\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialUrl = \"https://swapi.dev/api/species/\";\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\nexport function InfiniteSpecies() {\n  _s();\n  // TODO: get data for InfiniteScroll via React Query\n\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isError,\n    error\n  } = useInfiniteQuery(\"sw-species\", _ref => {\n    let {\n      pageParam = initialUrl\n    } = _ref;\n    fetchUrl(pageParam), {\n      getNextPageParam: lastPage => lastPage.next || undefined\n    };\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error! \", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFetching && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      loadMore: fetchNextPage,\n      hasMore: hasNextPage,\n      children: /*#__PURE__*/_jsxDEV(Species, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(InfiniteSpecies, \"1hAoQODaU/Q/pQoimGQOVMHFBPY=\", false, function () {\n  return [useInfiniteQuery];\n});\n_c = InfiniteSpecies;\nvar _c;\n$RefreshReg$(_c, \"InfiniteSpecies\");","map":{"version":3,"names":["InfiniteScroll","useInfiniteQuery","Species","initialUrl","fetchUrl","url","response","fetch","json","InfiniteSpecies","data","fetchNextPage","hasNextPage","isLoading","isFetching","isError","error","pageParam","getNextPageParam","lastPage","next","undefined","toString"],"sources":["/Users/yunminseok/Desktop/study/react-query_practice/base-infinite-swapi/src/species/InfiniteSpecies.jsx"],"sourcesContent":["import InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Species } from \"./Species\";\n\nconst initialUrl = \"https://swapi.dev/api/species/\";\nconst fetchUrl = async (url) => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfiniteSpecies() {\n  // TODO: get data for InfiniteScroll via React Query\n\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isError,\n    error,\n  } = useInfiniteQuery(\"sw-species\", ({ pageParam = initialUrl }) => {\n    fetchUrl(pageParam),\n      {\n        getNextPageParam: (lastPage) => lastPage.next || undefined,\n      };\n  });\n\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n  if (isError) return <div>Error! {error.toString()}</div>;\n\n  return (\n    <>\n      {isFetching && <div className=\"loading\">Loading...</div>}\n      <InfiniteScroll loadMore={fetchNextPage} hasMore={hasNextPage}>\n        <Species />\n      </InfiniteScroll>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,cAAc,MAAM,yBAAyB;AACpD,SAASC,gBAAgB,QAAQ,aAAa;AAC9C,SAASC,OAAO,QAAQ,WAAW;AAAC;AAAA;AAEpC,MAAMC,UAAU,GAAG,gCAAgC;AACnD,MAAMC,QAAQ,GAAG,MAAOC,GAAG,IAAK;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,OAAOC,QAAQ,CAACE,IAAI,EAAE;AACxB,CAAC;AAED,OAAO,SAASC,eAAe,GAAG;EAAA;EAChC;;EAEA,MAAM;IACJC,IAAI;IACJC,aAAa;IACbC,WAAW;IACXC,SAAS;IACTC,UAAU;IACVC,OAAO;IACPC;EACF,CAAC,GAAGf,gBAAgB,CAAC,YAAY,EAAE,QAAgC;IAAA,IAA/B;MAAEgB,SAAS,GAAGd;IAAW,CAAC;IAC5DC,QAAQ,CAACa,SAAS,CAAC,EACjB;MACEC,gBAAgB,EAAGC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,IAAIC;IACnD,CAAC;EACL,CAAC,CAAC;EAEF,IAAIR,SAAS,EAAE,oBAAO;IAAK,SAAS,EAAC,SAAS;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAiB;EAC/D,IAAIE,OAAO,EAAE,oBAAO;IAAA,sBAAaC,KAAK,CAACM,QAAQ,EAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAO;EAExD,oBACE;IAAA,WACGR,UAAU,iBAAI;MAAK,SAAS,EAAC,SAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,eACxD,QAAC,cAAc;MAAC,QAAQ,EAAEH,aAAc;MAAC,OAAO,EAAEC,WAAY;MAAA,uBAC5D,QAAC,OAAO;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACI;EAAA,gBAChB;AAEP;AAAC,GA7BeH,eAAe;EAAA,QAWzBR,gBAAgB;AAAA;AAAA,KAXNQ,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}
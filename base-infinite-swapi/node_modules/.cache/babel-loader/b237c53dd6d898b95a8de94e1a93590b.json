{"ast":null,"code":"var _jsxFileName = \"/Users/yunminseok/Desktop/study/react-query_practice/base-infinite-swapi/src/people/InfinitePeople.jsx\",\n  _s = $RefreshSig$();\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\nimport { Person } from \"./Person\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst initialUrl = \"https://swapi.dev/api/people/\";\nconst fetchUrl = async url => {\n  const response = await fetch(url);\n  return response.json();\n};\nexport function InfinitePeople() {\n  _s();\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isError,\n    error\n  } = useInfiniteQuery(\"sw-people\", _ref => {\n    let {\n      pageParam = initialUrl\n    } = _ref;\n    return fetchUrl(pageParam);\n  }, {\n    getNextPageParam: lastPage => lastPage.next || undefined\n  });\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 25\n  }, this);\n  if (isError) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error! \", error.toString()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [isFetching && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 22\n    }, this), /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n      loadMore: fetchNextPage,\n      hasMore: hasNextPage,\n      children: data.pages.map(pageData => {\n        return pageData.results.map(person => {\n          return /*#__PURE__*/_jsxDEV(Person, {\n            name: person.name,\n            hairColor: person.hair_color,\n            eyecolor: person.eye_color\n          }, person.name, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this);\n        });\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(InfinitePeople, \"1hAoQODaU/Q/pQoimGQOVMHFBPY=\", false, function () {\n  return [useInfiniteQuery];\n});\n_c = InfinitePeople;\nvar _c;\n$RefreshReg$(_c, \"InfinitePeople\");","map":{"version":3,"names":["InfiniteScroll","useInfiniteQuery","Person","initialUrl","fetchUrl","url","response","fetch","json","InfinitePeople","data","fetchNextPage","hasNextPage","isLoading","isFetching","isError","error","pageParam","getNextPageParam","lastPage","next","undefined","toString","pages","map","pageData","results","person","name","hair_color","eye_color"],"sources":["/Users/yunminseok/Desktop/study/react-query_practice/base-infinite-swapi/src/people/InfinitePeople.jsx"],"sourcesContent":["import InfiniteScroll from \"react-infinite-scroller\";\nimport { useInfiniteQuery } from \"react-query\";\n\nimport { Person } from \"./Person\";\n\nconst initialUrl = \"https://swapi.dev/api/people/\";\nconst fetchUrl = async (url) => {\n  const response = await fetch(url);\n  return response.json();\n};\n\nexport function InfinitePeople() {\n  const {\n    data,\n    fetchNextPage,\n    hasNextPage,\n    isLoading,\n    isFetching,\n    isError,\n    error,\n  } = useInfiniteQuery(\n    \"sw-people\",\n    ({ pageParam = initialUrl }) => fetchUrl(pageParam),\n    {\n      getNextPageParam: (lastPage) => lastPage.next || undefined,\n    }\n  );\n\n  if (isLoading) return <div className=\"loading\">Loading...</div>;\n  if (isError) return <div>Error! {error.toString()}</div>;\n\n  return (\n    <>\n      {isFetching && <div className=\"loading\">Loading...</div>}\n      <InfiniteScroll loadMore={fetchNextPage} hasMore={hasNextPage}>\n        {data.pages.map((pageData) => {\n          return pageData.results.map((person) => {\n            return (\n              <Person\n                key={person.name}\n                name={person.name}\n                hairColor={person.hair_color}\n                eyecolor={person.eye_color}\n              />\n            );\n          });\n        })}\n      </InfiniteScroll>\n    </>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,cAAc,MAAM,yBAAyB;AACpD,SAASC,gBAAgB,QAAQ,aAAa;AAE9C,SAASC,MAAM,QAAQ,UAAU;AAAC;AAAA;AAElC,MAAMC,UAAU,GAAG,+BAA+B;AAClD,MAAMC,QAAQ,GAAG,MAAOC,GAAG,IAAK;EAC9B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;EACjC,OAAOC,QAAQ,CAACE,IAAI,EAAE;AACxB,CAAC;AAED,OAAO,SAASC,cAAc,GAAG;EAAA;EAC/B,MAAM;IACJC,IAAI;IACJC,aAAa;IACbC,WAAW;IACXC,SAAS;IACTC,UAAU;IACVC,OAAO;IACPC;EACF,CAAC,GAAGf,gBAAgB,CAClB,WAAW,EACX;IAAA,IAAC;MAAEgB,SAAS,GAAGd;IAAW,CAAC;IAAA,OAAKC,QAAQ,CAACa,SAAS,CAAC;EAAA,GACnD;IACEC,gBAAgB,EAAGC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,IAAIC;EACnD,CAAC,CACF;EAED,IAAIR,SAAS,EAAE,oBAAO;IAAK,SAAS,EAAC,SAAS;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAAiB;EAC/D,IAAIE,OAAO,EAAE,oBAAO;IAAA,sBAAaC,KAAK,CAACM,QAAQ,EAAE;EAAA;IAAA;IAAA;IAAA;EAAA,QAAO;EAExD,oBACE;IAAA,WACGR,UAAU,iBAAI;MAAK,SAAS,EAAC,SAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,eACxD,QAAC,cAAc;MAAC,QAAQ,EAAEH,aAAc;MAAC,OAAO,EAAEC,WAAY;MAAA,UAC3DF,IAAI,CAACa,KAAK,CAACC,GAAG,CAAEC,QAAQ,IAAK;QAC5B,OAAOA,QAAQ,CAACC,OAAO,CAACF,GAAG,CAAEG,MAAM,IAAK;UACtC,oBACE,QAAC,MAAM;YAEL,IAAI,EAAEA,MAAM,CAACC,IAAK;YAClB,SAAS,EAAED,MAAM,CAACE,UAAW;YAC7B,QAAQ,EAAEF,MAAM,CAACG;UAAU,GAHtBH,MAAM,CAACC,IAAI;YAAA;YAAA;YAAA;UAAA,QAIhB;QAEN,CAAC,CAAC;MACJ,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QACa;EAAA,gBAChB;AAEP;AAAC,GAvCenB,cAAc;EAAA,QASxBR,gBAAgB;AAAA;AAAA,KATNQ,cAAc;AAAA;AAAA"},"metadata":{},"sourceType":"module"}
[{"/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/index.js":"1","/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/reportWebVitals.js":"2","/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/App.jsx":"3","/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/Posts.jsx":"4","/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/PostDetail.jsx":"5"},{"size":500,"mtime":1676746033000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1676746033000,"results":"8","hashOfConfig":"7"},{"size":506,"mtime":1677384821587,"results":"9","hashOfConfig":"7"},{"size":1990,"mtime":1678109939522,"results":"10","hashOfConfig":"7"},{"size":1335,"mtime":1677507188969,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"yopcrb",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/index.js",[],["24","25"],"/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/reportWebVitals.js",[],"/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/App.jsx",[],"/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/Posts.jsx",[],"/Users/yunminseok/Desktop/study/react-query_practice/base-blog-em/src/PostDetail.jsx",["26","27"],"import { useQuery } from \"react-query\";\n\nasync function fetchComments(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/comments?postId=${postId}`\n  );\n  return response.json();\n}\n\nasync function deletePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"DELETE\" }\n  );\n  return response.json();\n}\n\nasync function updatePost(postId) {\n  const response = await fetch(\n    `https://jsonplaceholder.typicode.com/postId/${postId}`,\n    { method: \"PATCH\", data: { title: \"REACT QUERY FOREVER!!!!\" } }\n  );\n  return response.json();\n}\n\nexport function PostDetail({ post }) {\n  // replace with useQuery\n  const { data, error, isError, isLoading } = useQuery(\n    [\"comments\", post.id],\n    () => fetchComments(post.id),\n    {\n      staleTime: 200,\n    }\n  );\n\n  if (isLoading) return <h3>Loading!</h3>;\n  if (isError)\n    return (\n      <>\n        <h3>Error</h3>\n        <p>{error.toString()}</p>\n      </>\n    );\n\n  return (\n    <>\n      <h3 style={{ color: \"blue\" }}>{post.title}</h3>\n      <button>Delete</button> <button>Update title</button>\n      <p>{post.body}</p>\n      <h4>Comments</h4>\n      {data.map((comment) => (\n        <li key={comment.id}>\n          {comment.email}: {comment.body}\n        </li>\n      ))}\n    </>\n  );\n}\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":10,"column":16,"nodeType":"34","messageId":"35","endLine":10,"endColumn":26},{"ruleId":"32","severity":1,"message":"36","line":18,"column":16,"nodeType":"34","messageId":"35","endLine":18,"endColumn":26},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'deletePost' is defined but never used.","Identifier","unusedVar","'updatePost' is defined but never used.","no-global-assign","no-unsafe-negation"]
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from './useUser';\n\n// for when we need a query function for useQuery\nasync function getUserAppointments(user) {\n  if (!user) return null;\n  const {\n    data\n  } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user)\n  });\n  return data.appointments;\n}\nexport function useUserAppointments() {\n  _s();\n  const {\n    user\n  } = useUser();\n  const fallback = [];\n  const {\n    data: userAppointents = fallback\n  } = useQuery([queryKeys.appointments, queryKeys.user, user === null || user === void 0 ? void 0 : user.id], () => getUserAppointments(user), {\n    enabled: !!user\n  });\n  return userAppointents;\n}\n_s(useUserAppointments, \"oBCBT8ZHRvB7sI+0oyMGKg2J0p4=\", false, function () {\n  return [useUser, useQuery];\n});","map":{"version":3,"names":["useQuery","axiosInstance","getJWTHeader","queryKeys","useUser","getUserAppointments","user","data","get","id","headers","appointments","useUserAppointments","fallback","userAppointents","enabled"],"sources":["/Users/yunminseok/Desktop/study/react-query_practice/base-lazy-days/client/src/components/user/hooks/useUserAppointments.ts"],"sourcesContent":["import dayjs from 'dayjs';\nimport { useQuery } from 'react-query';\n\nimport type { Appointment, User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useUser } from './useUser';\n\n// for when we need a query function for useQuery\nasync function getUserAppointments(\n  user: User | null,\n): Promise<Appointment[] | null> {\n  if (!user) return null;\n  const { data } = await axiosInstance.get(`/user/${user.id}/appointments`, {\n    headers: getJWTHeader(user),\n  });\n  return data.appointments;\n}\n\nexport function useUserAppointments(): Appointment[] {\n  const { user } = useUser();\n  const fallback: Appointment[] = [];\n  const { data: userAppointents = fallback } = useQuery(\n    [queryKeys.appointments, queryKeys.user, user?.id],\n    () => getUserAppointments(user),\n    { enabled: !!user },\n  );\n\n  return userAppointents;\n}\n"],"mappings":";AACA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,SAASC,aAAa,EAAEC,YAAY,QAAQ,wBAAwB;AACpE,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,OAAO,QAAQ,WAAW;;AAEnC;AACA,eAAeC,mBAAmB,CAChCC,IAAiB,EACc;EAC/B,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;EACtB,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMN,aAAa,CAACO,GAAG,CAAE,SAAQF,IAAI,CAACG,EAAG,eAAc,EAAE;IACxEC,OAAO,EAAER,YAAY,CAACI,IAAI;EAC5B,CAAC,CAAC;EACF,OAAOC,IAAI,CAACI,YAAY;AAC1B;AAEA,OAAO,SAASC,mBAAmB,GAAkB;EAAA;EACnD,MAAM;IAAEN;EAAK,CAAC,GAAGF,OAAO,EAAE;EAC1B,MAAMS,QAAuB,GAAG,EAAE;EAClC,MAAM;IAAEN,IAAI,EAAEO,eAAe,GAAGD;EAAS,CAAC,GAAGb,QAAQ,CACnD,CAACG,SAAS,CAACQ,YAAY,EAAER,SAAS,CAACG,IAAI,EAAEA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,EAAE,CAAC,EAClD,MAAMJ,mBAAmB,CAACC,IAAI,CAAC,EAC/B;IAAES,OAAO,EAAE,CAAC,CAACT;EAAK,CAAC,CACpB;EAED,OAAOQ,eAAe;AACxB;AAAC,GAVeF,mBAAmB;EAAA,QAChBR,OAAO,EAEqBJ,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\n// for when we need a query function for useQuery\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\nexport function useTreatments() {\n  _s();\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery('queryKeys.treatments', getTreatments);\n  return data;\n}\n_s(useTreatments, \"Dt1zu2A8Sa6608pid1m3JMfgG5k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","axiosInstance","getTreatments","data","get","useTreatments","fallback"],"sources":["/Users/yunminseok/Desktop/study/react-query_practice/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"sourcesContent":["import { useQuery } from 'react-query';\n\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\n\n// for when we need a query function for useQuery\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const fallback = [];\n  const { data = fallback } = useQuery('queryKeys.treatments', getTreatments);\n  return data;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,SAASC,aAAa,QAAQ,wBAAwB;AAItD;AACA,eAAeC,aAAa,GAAyB;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMF,aAAa,CAACG,GAAG,CAAC,aAAa,CAAC;EACvD,OAAOD,IAAI;AACb;AAEA,OAAO,SAASE,aAAa,GAAgB;EAAA;EAC3C,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEH,IAAI,GAAGG;EAAS,CAAC,GAAGN,QAAQ,CAAC,sBAAsB,EAAEE,aAAa,CAAC;EAC3E,OAAOC,IAAI;AACb;AAAC,GAJeE,aAAa;EAAA,QAECL,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\n\n// for when we need a query function for useQuery\nasync function getTreatments() {\n  const {\n    data\n  } = await axiosInstance.get('/treatments');\n  return data;\n}\nexport function useTreatments() {\n  _s();\n  const toast = useCustomToast();\n  const fallback = [];\n  const {\n    data = fallback\n  } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: error => {\n      const title = error instanceof Error ? error.message : 'error connecting to the server';\n    }\n  });\n  return data;\n}\n_s(useTreatments, \"a1yChVsruUsKUqiFt0j458n7JEM=\", false, function () {\n  return [useCustomToast, useQuery];\n});","map":{"version":3,"names":["useQuery","axiosInstance","queryKeys","useCustomToast","getTreatments","data","get","useTreatments","toast","fallback","treatments","onError","error","title","Error","message"],"sources":["/Users/yunminseok/Desktop/study/react-query_practice/base-lazy-days/client/src/components/treatments/hooks/useTreatments.ts"],"sourcesContent":["import { useQuery } from 'react-query';\n\nimport type { Treatment } from '../../../../../shared/types';\nimport { axiosInstance } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport { useCustomToast } from '../../app/hooks/useCustomToast';\n\n// for when we need a query function for useQuery\nasync function getTreatments(): Promise<Treatment[]> {\n  const { data } = await axiosInstance.get('/treatments');\n  return data;\n}\n\nexport function useTreatments(): Treatment[] {\n  const toast = useCustomToast();\n  const fallback = [];\n  const { data = fallback } = useQuery(queryKeys.treatments, getTreatments, {\n    onError: (error) => {\n      const title =\n        error instanceof Error\n          ? error.message\n          : 'error connecting to the server';\n    },\n  });\n  return data;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,aAAa;AAGtC,SAASC,aAAa,QAAQ,wBAAwB;AACtD,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,cAAc,QAAQ,gCAAgC;;AAE/D;AACA,eAAeC,aAAa,GAAyB;EACnD,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMJ,aAAa,CAACK,GAAG,CAAC,aAAa,CAAC;EACvD,OAAOD,IAAI;AACb;AAEA,OAAO,SAASE,aAAa,GAAgB;EAAA;EAC3C,MAAMC,KAAK,GAAGL,cAAc,EAAE;EAC9B,MAAMM,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEJ,IAAI,GAAGI;EAAS,CAAC,GAAGT,QAAQ,CAACE,SAAS,CAACQ,UAAU,EAAEN,aAAa,EAAE;IACxEO,OAAO,EAAGC,KAAK,IAAK;MAClB,MAAMC,KAAK,GACTD,KAAK,YAAYE,KAAK,GAClBF,KAAK,CAACG,OAAO,GACb,gCAAgC;IACxC;EACF,CAAC,CAAC;EACF,OAAOV,IAAI;AACb;AAAC,GAZeE,aAAa;EAAA,QACbJ,cAAc,EAEAH,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}
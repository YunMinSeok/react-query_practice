{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useQuery } from 'react-query';\nimport { queryKeys } from '../../../react-query/constants';\nimport { getStoredUser } from '../../../user-storage';\n\n// async function getUser(user: User | null): Promise<User | null> {\n//   if (!user) return null;\n//   const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n//     `/user/${user.id}`,\n//     {\n//       headers: getJWTHeader(user),\n//     },\n//   );\n//   return data.user;\n// }\n\nexport function useUser() {\n  _s();\n  // TODO: call useQuery to update user data from server\n  const {\n    data: user\n  } = useQuery(queryKeys.user, () => getStoredUser(user));\n\n  // meant to be called from useAuth\n  function updateUser(newUser) {\n    // TODO: update the user in the query cache\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // TODO: reset user to null in query cache\n  }\n  return {\n    user,\n    updateUser,\n    clearUser\n  };\n}\n_s(useUser, \"1MJZwZvN1HyPqYYt+s1UFBhDIA8=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"names":["useQuery","queryKeys","getStoredUser","useUser","data","user","updateUser","newUser","clearUser"],"sources":["/Users/yunminseok/Desktop/study/react-query_practice/base-lazy-days/client/src/components/user/hooks/useUser.ts"],"sourcesContent":["import { AxiosResponse } from 'axios';\nimport { useQuery } from 'react-query';\n\nimport type { User } from '../../../../../shared/types';\nimport { axiosInstance, getJWTHeader } from '../../../axiosInstance';\nimport { queryKeys } from '../../../react-query/constants';\nimport {\n  clearStoredUser,\n  getStoredUser,\n  setStoredUser,\n} from '../../../user-storage';\n\n// async function getUser(user: User | null): Promise<User | null> {\n//   if (!user) return null;\n//   const { data }: AxiosResponse<{ user: User }> = await axiosInstance.get(\n//     `/user/${user.id}`,\n//     {\n//       headers: getJWTHeader(user),\n//     },\n//   );\n//   return data.user;\n// }\n\ninterface UseUser {\n  user: User | null;\n  updateUser: (user: User) => void;\n  clearUser: () => void;\n}\n\nexport function useUser(): UseUser {\n  // TODO: call useQuery to update user data from server\n  const { data: user } = useQuery(queryKeys.user, () => getStoredUser(user));\n\n  // meant to be called from useAuth\n  function updateUser(newUser: User): void {\n    // TODO: update the user in the query cache\n  }\n\n  // meant to be called from useAuth\n  function clearUser() {\n    // TODO: reset user to null in query cache\n  }\n\n  return { user, updateUser, clearUser };\n}\n"],"mappings":";AACA,SAASA,QAAQ,QAAQ,aAAa;AAItC,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAEEC,aAAa,QAER,uBAAuB;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA,OAAO,SAASC,OAAO,GAAY;EAAA;EACjC;EACA,MAAM;IAAEC,IAAI,EAAEC;EAAK,CAAC,GAAGL,QAAQ,CAACC,SAAS,CAACI,IAAI,EAAE,MAAMH,aAAa,CAACG,IAAI,CAAC,CAAC;;EAE1E;EACA,SAASC,UAAU,CAACC,OAAa,EAAQ;IACvC;EAAA;;EAGF;EACA,SAASC,SAAS,GAAG;IACnB;EAAA;EAGF,OAAO;IAAEH,IAAI;IAAEC,UAAU;IAAEE;EAAU,CAAC;AACxC;AAAC,GAfeL,OAAO;EAAA,QAEEH,QAAQ;AAAA"},"metadata":{},"sourceType":"module"}
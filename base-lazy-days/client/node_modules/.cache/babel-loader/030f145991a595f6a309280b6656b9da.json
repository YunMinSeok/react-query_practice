{"ast":null,"code":"var _s = $RefreshSig$();\n// import { useQuery } from 'react-query';\n// import { Dispatch, SetStateAction, useState } from 'react';\n// import type { Staff } from '../../../../../shared/types';\n// import { axiosInstance } from '../../../axiosInstance';\n// import { queryKeys } from '../../../react-query/constants';\n// import { filterByTreatment } from '../utils';\n\n// for when we need a query function for useQuery\nasync function getStaff() {\n  const {\n    data\n  } = await axiosInstance.get('/staff');\n  return data;\n}\nexport function useStaff() {\n  _s();\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all');\n\n  // TODO: get data from server via useQuery\n  const fallback = [];\n  const {\n    data: staff = fallback\n  } = useQuery(queryKeys.staff, getStaff);\n  return {\n    staff,\n    filter,\n    setFilter\n  };\n}\n_s(useStaff, \"PLOpwNYaeWyTGupZ1P6bVt+udyo=\", true);","map":{"version":3,"names":["getStaff","data","axiosInstance","get","useStaff","filter","setFilter","useState","fallback","staff","useQuery","queryKeys"],"sources":["/Users/yunminseok/Desktop/study/react-query_practice/base-lazy-days/client/src/components/staff/hooks/useStaff.ts"],"sourcesContent":["// import { useQuery } from 'react-query';\n// import { Dispatch, SetStateAction, useState } from 'react';\n// import type { Staff } from '../../../../../shared/types';\n// import { axiosInstance } from '../../../axiosInstance';\n// import { queryKeys } from '../../../react-query/constants';\n// import { filterByTreatment } from '../utils';\n\n// for when we need a query function for useQuery\nasync function getStaff(): Promise<Staff[]> {\n  const { data } = await axiosInstance.get('/staff');\n  return data;\n}\n\ninterface UseStaff {\n  staff: Staff[];\n  filter: string;\n  setFilter: Dispatch<SetStateAction<string>>;\n}\n\nexport function useStaff(): UseStaff {\n  // for filtering staff by treatment\n  const [filter, setFilter] = useState('all');\n\n  // TODO: get data from server via useQuery\n  const fallback = [];\n  const { data: staff = fallback } = useQuery(queryKeys.staff, getStaff);\n\n  return { staff, filter, setFilter };\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAeA,QAAQ,GAAqB;EAC1C,MAAM;IAAEC;EAAK,CAAC,GAAG,MAAMC,aAAa,CAACC,GAAG,CAAC,QAAQ,CAAC;EAClD,OAAOF,IAAI;AACb;AAQA,OAAO,SAASG,QAAQ,GAAa;EAAA;EACnC;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGC,QAAQ,CAAC,KAAK,CAAC;;EAE3C;EACA,MAAMC,QAAQ,GAAG,EAAE;EACnB,MAAM;IAAEP,IAAI,EAAEQ,KAAK,GAAGD;EAAS,CAAC,GAAGE,QAAQ,CAACC,SAAS,CAACF,KAAK,EAAET,QAAQ,CAAC;EAEtE,OAAO;IAAES,KAAK;IAAEJ,MAAM;IAAEC;EAAU,CAAC;AACrC;AAAC,GATeF,QAAQ"},"metadata":{},"sourceType":"module"}